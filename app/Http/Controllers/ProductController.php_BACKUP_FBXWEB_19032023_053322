<?php

namespace App\Http\Controllers;

use App\Participant;
use App\Product;
use App\CreateProductimage;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Redirect;
use QRcode;

class ProductController extends Controller
{
    public function index()
    {

        $products = DB::table('products')
            ->select('products.id', 'products.name', 'products.price', 'products.slug', 'products_images.name as image', 'products.status', 'products.draw_date', 'products.visible', 'products.favoritar')
            ->join('products_images', 'products.id', 'products_images.product_id')
            //->where('products.status', '<>', 'Finalizado')
            ->groupBy('products.id')
            ->orderBy('products.id', 'DESC')
            ->get();

        $winners = DB::table('products')
            ->select('*')
            ->where('products.status', '=', 'Finalizado')
            ->where('products.visible', '=', 1)
            ->orderBy('products.id', 'desc')
            //->limit(5)
            ->get();

        //dd(empty($winners[0]));

        return view('welcome', [
            'products' => $products,
            'winners' => $winners
        ]);
    }

    public function product($idProductURL)
    {

        //dd($idProductURL);

        $productSlug = DB::table('products')
            ->select('id')
            ->where('products.slug', '=', $idProductURL)
            ->get();

        //dd($productSlug[0]->id);

        $productID = $productSlug[0]->id;

        //dd($productID);

        $user = DB::table('users')
            ->select('users.name', 'users.telephone', 'products.type_raffles')
            ->leftJoin('products', 'products.user_id', 'users.id')
            ->leftJoin('consulting_environments', 'consulting_environments.user_id', 'users.id')
            ->where('products.id', '=', $productID)
            ->first();
        $imagens = DB::table('products_images')
            ->select('products_images.name')
            ->join('products', 'products.id', '=', 'products_images.product_id')
            ->where('products.id', '=', $productID)
            ->get();
            //dd($imagens);



        $productDetail = DB::table('products')
            ->select('products.id', 'products.name', 'products.subname', 'products.product', 'products.price', 'products_images.name as image', 'products.status', 'products.draw_date', 'products.draw_prediction', 'products.winner')
            ->leftJoin('products_images', 'products.id', 'products_images.product_id')
            ->where('products.id', '=', $productID)
            ->orderBy('products_images.name', 'ASC')
            ->get();

        $bookProduct = DB::table('products')
            ->select('products.name', 'products.price', 'raffles.number', 'raffles.status', 'products.status as statusProduct', 'participant.name as participant', 'participant.created_at')
            ->join('raffles', 'products.id', '=', 'raffles.product_id')
            ->leftJoin('participant', 'raffles.id', 'participant.raffles_id')
            ->where('products.id', '=', $productID)
            ->get();
        
        $productDescription = DB::table('product_description')
            ->select('product_description.description', 'product_description.video')
            ->join('products', 'products.id', '=', 'product_description.product_id')
            ->where('products.id', '=', $productID)
            ->first();
        //dd($productDescription->description);
        

        //TOTAIS DE NÚMEROS
        $totalNumbers = DB::table('products')
            ->select('raffles.status')
            ->join('raffles', 'products.id', '=', 'raffles.product_id')
            ->where('products.id', '=', $productID)
            ->count();

        $totalDispo = DB::table('products')
            ->select('raffles.status')
            ->join('raffles', 'products.id', '=', 'raffles.product_id')
            ->where('products.id', '=', $productID)
            ->where('raffles.status', '=', 'Disponível')
            ->count();

        $totalReser = DB::table('products')
            ->select('raffles.status')
            ->join('raffles', 'products.id', '=', 'raffles.product_id')
            ->where('products.id', '=', $productID)
            ->where('raffles.status', '=', 'Reservado')
            ->count();

        $totalPago = DB::table('products')
            ->select('raffles.status')
            ->join('raffles', 'products.id', '=', 'raffles.product_id')
            ->where('products.id', '=', $productID)
            ->where('raffles.status', '=', 'Pago')
            ->count();

        $valueProduct = DB::table('products')
            ->select('price')
            ->where('products.id', '=', $productID)
            ->first();

        $value50 = str_replace(',', '.', $valueProduct->price) * 50;
        $value100 = str_replace(',', '.', $valueProduct->price) * 100;
        $value150 = str_replace(',', '.', $valueProduct->price) * 150;
        $value200 = str_replace(',', '.', $valueProduct->price) * 200;

        $result50 = $value50 - ($value50 * 10 / 100);
        $result100 = $value100 - ($value100 * 10 / 100);
        $result150 = $value150 - ($value150 * 10 / 100);
        $result200 = $value200 - ($value200 * 10 / 100);

        return view('product-detail', [
            'imagens' => $imagens,
            'product' => $productDetail,
            'bookProduct' => $bookProduct,
            'productDescription' => $productDescription->description,
            'productDescriptionVideo' => $productDescription->video,
            'totalNumbers' => $totalNumbers,
            'totalDispo' => $totalDispo,
            'totalReser' => $totalReser,
            'totalPago' => $totalPago,
            'user' => $user->name,
            'telephone' => $user->telephone,
            'type_raffles' => $user->type_raffles,
            'result50' => number_format($result50, 2, ",", "."),
            'result100' => number_format($result100, 2, ",", "."),
            'result150' => number_format($result150, 2, ",", "."),
            'result200' => number_format($result200, 2, ",", "."),
        ]);
    }

    public function randomParticipant()
    {
        $userRandom = Participant::inRandomOrder()->select('name')->first();
        $resultUserRandom = explode(' ', $userRandom->name);

        return json_encode($resultUserRandom);
    }

    public function getRaffles(Request $request)
    {
        //dd($request->idProductURL);

        $bookProduct = DB::table('products')
            ->select('products.name', 'products.price', 'raffles.number', 'raffles.status', 'products.status as statusProduct', 'participant.name as participant', 'participant.created_at')
            ->join('raffles', 'products.id', '=', 'raffles.product_id')
            ->leftJoin('participant', 'raffles.id', 'participant.raffles_id')
            ->where('products.id', '=', $request->idProductURL)
            ->get();

        foreach ($bookProduct as $raffles) {
            if ($raffles->statusProduct === 'Ativo') {
                if ($raffles->status === 'Disponível') {
                    $resultRaffles[] = "<a href='javascript:void(0);' class='number filter disponivel' onclick=\"selectRaffles('" . $raffles->number . "')\" style='background-color: #f1f1f1;color: #000;' id=" . $raffles->number . ">" . $raffles->number . "</a>";
                } else if ($raffles->status  == "Reservado") {
                    $resultRaffles[] = "<a href='javascript:void(0);' class='number filter reservado' onclick=\"timeNumbers(this)\" style='background-color: #d7d5d5;color: #000;display:none;' id=" . $raffles->number . " data-toggle='tooltip' data-placement='top' data-html='true' title='Reservado por: " . $raffles->participant . "'><input type='hidden' id='createdAt" . $raffles->number . "' value=''>" . $raffles->number . "</a>";
                } else if ($raffles->status == "Pago") {
                    $resultRaffles[] = "<a href='javascript:void(0);' class='number filter pago' style='background-color: #28a745;color: #fff;display:none;' id='" . $raffles->number . "' data-toggle='tooltip' data-placement='top' title='Pago por: " . $raffles->participant . "'>" . $raffles->number . "</a>";
                }
            } else if ($raffles->statusProduct === 'Agendado') {
                if ($raffles->status === 'Disponível') {
                    $resultRaffles[] = "<a href='javascript:void(0);' class='number filter disponivel' onclick=\"alert('Sorteio agendado não é mais possível reservar!')\" style='background-color: #f1f1f1;color: #000;' id=" . $raffles->number . ">" . $raffles->number . "</a>";
                } else if ($raffles->status  == "Reservado") {
                    $resultRaffles[] = "<a href='javascript:void(0);' class='number filter reservado' style='background-color: #0F9EE2;color: #fff;' id=" . $raffles->number . " data-toggle='tooltip' data-placement='top' data-html='true' title='Reservado por: " . $raffles->participant . "'><input type='hidden' id='createdAt" . $raffles->number . "' value=''>" . $raffles->number . "</a>";
                } else if ($raffles->status == "Pago") {
                    $resultRaffles[] = "<a href='javascript:void(0);' class='number filter pago' style='background-color: #28a745;color: #fff;' id='" . $raffles->number . "' data-toggle='tooltip' data-placement='top' title='Pago por: " . $raffles->participant . "'>" . $raffles->number . "</a>";
                }
            } else if ($raffles->statusProduct === 'Finalizado') {
                if ($raffles->status === 'Disponível') {
                    $resultRaffles[] = "<a href='javascript:void(0);' class='number filter disponivel' onclick=\"alert('Sorteio finalizado não é mais possível reservar!')\" style='background-color: #f1f1f1;color: #fff;' id=" . $raffles->number . ">" . $raffles->number . "</a>";
                } else if ($raffles->status  == "Reservado") {
                    $resultRaffles[] = "<a href='javascript:void(0);' class='number filter reservado' style='background-color: #0F9EE2;color: #fff;' id=" . $raffles->number . " data-toggle='tooltip' data-placement='top' data-html='true' title='Reservado por: " . $raffles->participant . "'><input type='hidden' id='createdAt" . $raffles->number . "' value=''>" . $raffles->number . "</a>";
                } else if ($raffles->status == "Pago") {
                    $resultRaffles[] = "<a href='javascript:void(0);' class='number filter pago' style='background-color: #28a745;color: #fff;' id='" . $raffles->number . "' data-toggle='tooltip' data-placement='top' title='Pago por: " . $raffles->participant . "'>" . $raffles->number . "</a>";
                }
            } else {
                $resultRaffles[] = null;
            }
        }

        return json_encode($resultRaffles);
    }

    //REVERSA OS NÚMEROS DO SORTEIO X SEM INTEGRAÇÃO COM O PIX
    public function bookProductManualy(Request $request)
    {

        //require_once 'vendor/autoload.php';

        //dd($request->all());

        $codeKeyPIX = DB::table('consulting_environments')
            ->select('key_pix')
            ->where('user_id', '=', 1)
            ->first();

        if ($codeKeyPIX->key_pix == null) {
            return Redirect::back()->withErrors('Administrador precisa adicionar a integração com o banco!');
        } else {

            $statusProduct = DB::table('products')
                ->select('status')
                ->where('products.id', '=', $request->productID)
                ->first();

            //dd($request->productID);

            if ($statusProduct->status == "Ativo") {

                $user = DB::table('users')
                    ->select('users.name', 'users.telephone', 'products.type_raffles')
                    ->leftJoin('products', 'products.user_id', 'users.id')
                    ->leftJoin('consulting_environments', 'consulting_environments.user_id', 'users.id')
                    ->where('products.id', '=', $request->productID)
                    ->first();

                if ($user->type_raffles == 'manual') {
                    $validatedData = $request->validate([
                        'name' => 'required|max:255',
                        'telephone' => 'required|max:15',
                    ]);
                } else if ($user->type_raffles == 'mesclado') {
                    if ($request->qtdNumbers == null) {
                        $validatedData = $request->validate([
                            'name' => 'required|max:255',
                            'telephone' => 'required|max:15',
                        ]);
                    } else {
                        $validatedData = $request->validate([
                            'name' => 'required|max:255',
                            'telephone' => 'required|max:15',
                            'qtdNumbers' => 'numeric|min:1|max:500'
                        ]);
                    }
                } else if ($user->type_raffles == 'mesclado2') {
                    if ($request->qtdNumbers == null) {
                        $validatedData = $request->validate([
                            'name' => 'required|max:255',
                            'telephone' => 'required|max:15',
                        ]);
                    } else {
                        $validatedData = $request->validate([
                            'name' => 'required|max:255',
                            'telephone' => 'required|max:15',
                            'qtdNumbers' => 'numeric|min:1|max:500'
                        ]);
                    }
                } else {
                    $validatedData = $request->validate([
                        'name' => 'required|max:255',
                        'telephone' => 'required|max:15',
                        'qtdNumbers' => 'numeric|min:1|max:500'
                    ]);
                }

                if ($request->qtdNumbers == null) {
                    $numbers = $request->numberSelected;
                    $resutlNumbers = explode(",", $numbers);
                } else {
                    $randomNumbers = DB::table('raffles')
                        ->select('number')
                        ->where('raffles.product_id', '=', $request->productID)
                        ->where('raffles.status', '=', 'Disponível')
                        ->inRandomOrder()
                        ->limit($request->qtdNumbers)
                        ->get();

                    //dd($randomNumbers);

                    foreach ($randomNumbers as $resultNumber) {
                        //dd($resultNumber->number);
                        $resutlNumbers[] = $resultNumber->number;
                    }

                    $numbers = implode(",", $resutlNumbers);

                    //dd($resutlNumbers);
                }

                $product = DB::table('products')
                    ->select('products.*', 'products_images.name as image')
                    ->join('products_images', 'products.id', 'products_images.product_id')
                    ->where('products.id', '=', $request->productID)
                    ->first();


                if (count($resutlNumbers) == 50) {
                    $new = str_replace(",", ".", $product->price);

                    $price = count($resutlNumbers) * $new - (count($resutlNumbers) * $new * 10 / 100);

                    $resultPrice = number_format($price, 2, ",", ".");

                    $resultPricePIX = number_format($price, 2, ".", ",");
                } elseif (count($resutlNumbers) == 100) {
                    $new = str_replace(",", ".", $product->price);

                    $price = count($resutlNumbers) * $new - (count($resutlNumbers) * $new * 10 / 100);

                    $resultPrice = number_format($price, 2, ",", ".");

                    $resultPricePIX = number_format($price, 2, ".", ",");
                } elseif (count($resutlNumbers) == 150) {
                    $new = str_replace(",", ".", $product->price);

                    $price = count($resutlNumbers) * $new - (count($resutlNumbers) * $new * 10 / 100);

                    $resultPrice = number_format($price, 2, ",", ".");

                    $resultPricePIX = number_format($price, 2, ".", ",");
                } elseif (count($resutlNumbers) == 200) {
                    $new = str_replace(",", ".", $product->price);

                    $price = count($resutlNumbers) * $new - (count($resutlNumbers) * $new * 10 / 100);

                    $resultPrice = number_format($price, 2, ",", ".");

                    $resultPricePIX = number_format($price, 2, ".", ",");
                } else {
                    $new = str_replace(",", ".", $product->price);

                    $price = count($resutlNumbers) * $new;
                    $resultPrice = number_format($price, 2, ",", ".");

                    $resultPricePIX = number_format($price, 2, ".", ",");

                    //dd($resultPricePIX);
                }

                $teste = \MercadoPago\SDK::setAccessToken($codeKeyPIX->key_pix);

                $payment = new \MercadoPago\Payment();
                $payment->transaction_amount = $resultPricePIX;
                $payment->description = "Participação da ação " . $request->productID . ' - ' . $request->productName . " Cota(s): " . $numbers;
                $payment->payment_method_id = "pix";
                $payment->payer = array(
                    "email" => $request->email,
                    "first_name" => $request->name,
                    "identification" => array(
                        "type" => "CPF",
                        "number" => $request->cpf
                    ),
                    /*"address" =>  array(
                    "zip_code" => "06233200",
                    "street_name" => "Av. das Nações Unidas",
                    "street_number" => "3003",
                    "neighborhood" => "Bonfim",
                    "city" => "Osasco",
                    "federal_unit" => "SP"
                )*/
                );

                $payment->save();

                $object = (object) $payment;

                if (isset($object->error->message) == 'Invalid user identification number') {
                    return Redirect::back()->withErrors('CPF invalido digite corretamente!');
                }

                $codePIXID = $object->id;
                $codePIX = $object->point_of_interaction->transaction_data->qr_code;
                $qrCode = $object->point_of_interaction->transaction_data->qr_code_base64;

                //dd($QRCode);

                foreach ($resutlNumbers as $number) {

                    //VERIFICA SE JÁ POSSUI PARTICIPANTE SE A VARIAVAL RETORNAR NULL CADASTRA SE NÃO TRAVA NO ERRO
                    $haveParticipant = DB::table('raffles')
                        ->select('*')
                        ->where('raffles.product_id', '=', $request->productID)
                        ->where('raffles.number', '=', $number)
                        //->where('raffles.status', '<>', 'Disponível')
                        ->first();

                    //dd($haveParticipant);

                    if ($haveParticipant->status == 'Disponível') {
                    } else {
                        return Redirect::back()->withErrors('Acabaram de reservar o número ' . $number . ' escolha outro número :)');
                    }


                    $rafflesID = DB::table('raffles')
                        ->where('product_id', '=', $request->productID)
                        ->where('number', '=', $number)
                        ->update(
                            [
                                'status' => 'Reservado',
                                //'updated_at' => Carbon::now()
                            ]
                        );

                    $userParticipant[] = DB::table('participant')->insertGetId(
                        [
                            'name' => $request->name,
                            'telephone' => $request->telephone,
                            'email' => $request->email,
                            'cpf' => $request->cpf,
                            'raffles_id' => $haveParticipant->id,
                            'product_id' => $request->productID,
                            'created_at' => Carbon::now(),
                            'updated_at' => Carbon::now()
                        ]
                    );
                }

                //RODA O FOREACH E PEGA TODOS OS PARTICIPANTES E INSERE NA TABELA DE PAGAMENTO O TXID
                foreach ($userParticipant as $user) {
                    $paymentPIX = DB::table('payment_pix')->insert([
                        'key_pix' => $codePIXID,
                        'full_pix' => $codePIX,
                        'status' => 'Pendente',
                        'participant_id' => $user,
                        'created_at' => Carbon::now(),
                        'updated_at' => Carbon::now()
                    ]);
                }

                //CADASTRA O KEY PIX NA TABELA UMA VEZ PARA IDENTIFICAR DEPOIS O NUMERO DO PEDIDO
                $order = DB::table('order')->insert([
                    'key_pix' => $codePIXID,
                    'created_at' => Carbon::now(),
                    'updated_at' => Carbon::now()
                ]);

                $countRaffles = count($resutlNumbers);
                $priceUnicFormat = str_replace(',', '.', $product->price);

                $percentage = 5;

                $percentagePriceUnic = ($percentage / 100) * $priceUnicFormat;
                $resultPriceUnic = $priceUnicFormat + $percentagePriceUnic + 0.50;

                //dd(number_format($resultPriceUnic, 2, ".", ","));

                //dd("AQUI");

                return redirect()->route('checkoutManualy', [
                    'participant' => $request->name,
                    'cpf' => $request->cpf,
                    'email' => $request->email,
                    'telephone' => $request->telephone,
                    'numbers' => $numbers,
                    'price' => $resultPrice,
                    'product' => $product->name,
                    'productID' => $product->id,
                    'drawdate' => $product->draw_date,
                    'image' => $product->image,
                    'PIX' => $resultPricePIX,
                    'countRaffles' => $countRaffles,
                    'priceUnic' => number_format($resultPriceUnic, 2, ".", ","),
                    'codePIX' => $codePIX,
                    'qrCode' => $qrCode,
                    'codePIXID' => $codePIXID

                ])->withInput();
            } elseif ($statusProduct->status == "Agendado") {
                return Redirect::back()->withErrors('Sorteio agendado não é mais possível reservar!');
            } else {
                return Redirect::back()->withErrors('Sorteio finalizado não é mais possível reservar!');
            }
        }
    }

    public function participants(Request $request)
    {
        //dd($request->product);

        $participants = Participant::select('name')
            ->join('raffles', 'participant.raffles_id', 'raffles.id')
            ->where('raffles.status', '=', 'Pago')
            ->where('raffles.product_id', '=', $request->product)
            ->inRandomOrder()
            ->count();

        //dd($teste->name);

        return $participants;
    }

    public function searchNumbers(Request $request)
    {
        $substr = substr($request->telephone, 0, 2);
        $ddd = '(' . $substr . ')';
        $substr1 = ' ' . substr($request->telephone, 2, 5) . '-';
        $substr2 = substr($request->telephone, 7);
        $resultTelephone = $ddd . $substr1 . $substr2;

        $numbersPaid = DB::table('participant')
            ->select('raffles.number', 'raffles.status', 'products.name')
            ->join('raffles', 'participant.raffles_id', 'raffles.id')
            ->join('products', 'products.id', 'raffles.product_id')
            ->where('participant.telephone', '=', $resultTelephone)
            ->where('products.id', '=', $request->productID)
            ->where('raffles.status', '=', 'Pago')
            ->get();

        return $numbersPaid;
    }

    public function searchPIX(Request $request)
    {
        $substr = substr($request->telephone, 0, 2);
        $ddd = '(' . $substr . ')';
        $substr1 = ' ' . substr($request->telephone, 2, 5) . '-';
        $substr2 = substr($request->telephone, 7);
        $resultTelephone = $ddd . $substr1 . $substr2;

        $pix = DB::table('participant')
            ->select('raffles.number', 'key_pix')
            ->leftJoin('payment_pix', 'participant.id', 'payment_pix.participant_id')
            ->join('raffles', 'participant.raffles_id', 'raffles.id')
            ->where('participant.telephone', '=', $resultTelephone)
            ->where('participant.product_id', '=', $request->product)
            ->get();

        return $pix;
    }

    public function callbackPaymentMercadoPago(Request $request)
    {

        //$resultCallBacks = $request->all();

        /*$teste = array(
            'action' => 'payment.updated',
            'api_version' => 'v1',
            'data' =>
            array(
                'id' => '53385711687',
            ),
            'date_created' => '2023-01-07T13:07:19Z',
            'id' => 104558878009,
            'live_mode' => true,
            'type' => 'payment',
            'user_id' => '197295574',
            'data_id' => '53385711687',
        );

        Log::info($teste['data']['id']);*/

        //QUANDO FOR TESTAR PELO POSTMAN COLOCAR O VALOR DO ARRAY 0 no request\/
        //dd($request[0]['action']);

        if ($request['action'] == 'payment.updated') {

            DB::table('payment_pix')
                ->where('key_pix', $request['data']['id'])
                ->update(['status' => 'Concluída']);

            $updatingRaffles = DB::table('payment_pix')
                ->join('participant', 'participant.id', '=', 'payment_pix.participant_id')
                ->join('raffles', 'raffles.id', '=', 'participant.raffles_id')
                ->where('payment_pix.key_pix', $request['data']['id'])
                ->update(
                    [
                        'raffles.status' => 'Pago',
                        'raffles.updated_at' => Carbon::now()
                    ]
                );

            $participantEmail = DB::table('payment_pix')
                ->select('participant.name', 'participant.email', 'participant.telephone', 'raffles.*', 'products.name as product', 'products.id as productID', 'products.ebook')
                ->join('participant', 'participant.id', '=', 'payment_pix.participant_id')
                ->join('raffles', 'raffles.id', '=', 'participant.raffles_id')
                ->join('products', 'products.id', '=', 'participant.product_id')
                ->where('payment_pix.key_pix', $request['data']['id'])
                ->get();

            $rafflesNumber = [];

            foreach ($participantEmail as $raffle) {
                array_push($rafflesNumber, $raffle->number);
            }

            $raffleImplode = implode(',', $rafflesNumber);

            $consultingEnvironment = DB::table('consulting_environments')
                ->first();

            $dddTelephone = substr($participantEmail[0]->telephone, 1, 2);
            $n1Telephone = substr($participantEmail[0]->telephone, 5, 5);
            $n2Telephone = substr($participantEmail[0]->telephone, 11, 4);

            $dados = array(
                'name' => $participantEmail[0]->name,
                'email' => $participantEmail[0]->email,
                'product' => $participantEmail[0]->product,
                'productID' => $participantEmail[0]->productID,
                'url' => url('/products/' . $participantEmail[0]->ebook),
                'raffles' => $raffleImplode,
                'environment' => $consultingEnvironment->name,
                'instagram' => $consultingEnvironment->instagram,
                'facebook' => $consultingEnvironment->instagram,
                'searchMyRaffles' => url('reserva/' . $participantEmail[0]->productID . '/' . $dddTelephone . $n1Telephone . $n2Telephone)
            );

            $emailUser = $participantEmail[0]->email;
            $environment = $consultingEnvironment->name;

            Mail::send('mails.payment', ['dados' => $dados], function ($message) use ($emailUser, $environment) {
                $message->from('contato@gosolution.com.br', $environment);
                $message->to($emailUser);
                $message->subject('Ação entre amigos');
            });

            return response()->json(['success' => 'success'], 200);
        } else {

            return response()->json(['error' => 'error'], 404);
        }

        //Log::info($request->all());
    }
}
